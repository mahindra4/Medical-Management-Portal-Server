// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// In prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id     String   @id @default(uuid())
  email  String   @unique
  name   String
  role   UserRole
  status Status   @default(ACTIVE)

  @@map("user")
}

model Requests {
  id    String   @id @default(uuid())
  email String   @unique
  name  String
  role  UserRole

  @@map("requests")
}

model Verification {
  id         String   @id @default(uuid())
  email      String   @unique
  otp        String
  expiryTime DateTime
}

model Medicine {
  id              String            @id @default(uuid())
  brandName       String
  saltName        String
  categoryId      String
  Stock           Stock[]
  Purchases       Purchase[]
  CheckupMedicine CheckupMedicine[]
  ObservationDetails ObservationDetails[]
  status          Status            @default(ACTIVE)
  Category        Category          @relation(fields: [categoryId], references: [id])

  @@map("medicine")
}

model Supplier {
  id           String         @id @default(uuid())
  name         String
  address      String
  city         String?
  state        String
  pinCode      Int?
  mobileNumber String         @unique
  email        String?
  status       Status         @default(ACTIVE)
  PurchaseList PurchaseList[]

  @@map("supplier")
}

model Staff {
  id             String     @id @default(uuid())
  name           String
  email          String     @unique
  mobileNumber   String?
  role           Role
  department     String?
  speciality     String?
  gender         Gender
  status         Status     @default(ACTIVE)
  DoctorCheckups Checkup[]  @relation("DoctorCheckups")
  StaffCheckups  Checkup[]  @relation("StaffCheckups")
  Schedule       Schedule[]

  @@map("staff")
}

model Schedule {
  id      String @id @default(uuid())
  staffId String
  shift   Shift
  day     Day

  Staff Staff @relation(fields: [staffId], references: [id])

  @@map("schedule")
}

model Stock {
  id          String   @id @default(uuid())
  medicineId  String
  stock       Int
  inQuantity  Int
  outQuantity Int
  Medicine    Medicine @relation(fields: [medicineId], references: [id])

  @@map("stock")
}

model PurchaseList {
  id           String   @id @default(uuid())
  supplierId   String
  purchaseDate DateTime
  invoiceNo    BigInt   @unique
  Details      String?

  Supplier Supplier   @relation(fields: [supplierId], references: [id])
  Purchase Purchase[]

  @@map("purchaseList")
}

model Category {
  id           String     @id @default(uuid())
  categoryName String
  strengthType String
  status       Status     @default(ACTIVE)
  Medicine     Medicine[]

  @@map("category")
}

model Purchase {
  id             String    @id @default(uuid())
  purchaseListId String
  medicineId     String
  mfgDate        DateTime?
  expiryDate     DateTime
  batchNo        BigInt    @unique
  quantity       Int

  Medicine     Medicine     @relation(fields: [medicineId], references: [id])
  PurchaseList PurchaseList @relation(fields: [purchaseListId], references: [id])

  @@map("purchase")
}

model Patient {
  id                 String          @id @default(uuid())
  name               String
  department         Department?
  age                Int
  email              String          @unique
  bloodGroup         String
  program            Program?
  fatherOrSpouseName String?
  category           PatientCategory
  gender             Gender
  allergy            String?
  Checkup            Checkup[]
  status             Status          @default(ACTIVE)
  PatientVitals      PatientVitals[]

  @@map("patient")
}

model Checkup {
  id               String   @id @default(uuid())
  patientId        String
  temperature      Float?
  date             DateTime
  spO2             Float?
  pulseRate        Int?
  bloodPressure    String?
  symptoms         String?
  diagnosis        String
  referredDoctor   String?
  referredHospital String?
  doctorId         String?
  staffId          String

  Patient Patient @relation(fields: [patientId], references: [id])

  Doctor Staff? @relation("DoctorCheckups", fields: [doctorId], references: [id])
  Staff  Staff  @relation("StaffCheckups", fields: [staffId], references: [id])

  CheckupMedicine CheckupMedicine[]
  PatientUnderObs PatientUnderObs?

  @@map("checkup")
}

model PatientVitals {
  id            String   @id @default(uuid())
  patientId     String
  temperature   Float?
  date          DateTime
  bloodPressure String?
  pulseRate     Int?
  spO2          Float?

  Patient Patient @relation(fields: [patientId], references: [id])

  @@map("patient_vitals")
}

model CheckupMedicine {
  id         String  @id @default(uuid())
  medicineId String
  dosage     String?
  quantity   Int
  checkupId  String

  Medicine Medicine @relation(fields: [medicineId], references: [id])
  Checkup  Checkup  @relation(fields: [checkupId], references: [id])

  @@map("checkupMedicine")
}

model DiagnosisSymptoms {
  id        String @id @default(uuid())
  diagnosis String
  symptom   String

  @@map("diagnosis_symptoms")
}

model Hospitals {
  id   String @id @default(uuid())
  name String

  @@map("hospitals")
}

model Procedure {
  id                      String    @unique
  patientEmail            String
  patientName             String
  inTime                  DateTime
  procedureRecord         String
  patientConditionBefore  String
  referredHospital        String
  outTime                 DateTime?

  @@map("procedures")
}

model OpdCounter {
  id    String @id
  date  String
  count Int
}

model PatientUnderObs {
  id               String             @id @default(uuid())
  checkupId        String             @unique
  checkup          Checkup            @relation(fields: [checkupId], references: [id])
  observationId    String             @unique
  observation      ObservationDetails @relation(fields: [observationId], references: [id])
  isUnderObservation Boolean          @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@map("patient_under_obs")
}

model ObservationDetails {
  id                String           @id @default(uuid())
  medicineId        String?
  medicine          Medicine?        @relation(fields: [medicineId], references: [id])
  dosage            String?
  frequency         String?
  dailyQuantity     Int
  days              Int
  availableQuantity Int
  patientUnderObs   PatientUnderObs?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("observation_details")
}

enum EquipmentType {
  SALINE
  INJECTION
  OTHER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Department {
  COMPUTER_SCIENCE
  ELECTRICAL
  MECHANICAL
  MATHEMATICS_COMPUTING
  CHEMICAL
  CIVIL
  METALLURGY
  ENGINEERING_PHYSICS
  PHYSICS
  CHEMISTRY
  BIOLOGY
  MATHEMATICS
  HUMANITIES
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Shift {
  MORNING
  AFTERNOON
  NIGHT
}

enum Program {
  BTECH
  MTECH
  PHD
  DUAL_DEGREE
}

enum UserRole {
  DOCTOR
  PATIENT
  ADMIN
  PARAMEDICAL
}

enum DoctorDepartment {
  AYURVEDIC
  GYNECOLOGY
  HOMEOPATHY
  OTHERS
}

enum Role {
  DOCTOR
  PARAMEDICAL
}

enum PatientCategory {
  STUDENT
  FACULTY
  STAFF
  VISITOR
}

enum Gender {
  MALE
  FEMALE
}